import{S as Xs,i as Ys,s as Zs,k as p,q as e,a as u,l,m as i,r as n,h as s,c as k,n as c,b as r,E as t,B as ms}from"./index-73b08c3b.js";function $s(Ns){let v,_a,na,w,b,B,xa,oa,E,Ta,H,Pa,ja,pa,M,Fs=`<code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> sveltekit <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@sveltejs/kit/vite"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> imagetools <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vite-imagetools"</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token literal-property property">config</span><span class="token operator">:</span> UserConfig <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">sveltekit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">imagetools</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token comment">// ....</span></code>`,la,N,Aa,ia,L,zs=`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">import</span> face <span class="token keyword">from</span> <span class="token string">"assets/face.jpg?w=400&amp;webp"</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>face<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span></code>`,ra,d,Ha,K,Ma,La,G,Sa,Ca,J,Ia,Oa,ca,_,x,Q,Da,ua,f,qa,S,Ra,Na,C,Fa,za,I,Ua,Va,ka,m,Wa,O,Ba,Ka,X,Ga,Ja,ha,D,Us=`<code class="language-js"><span class="token keyword">import</span> remarkRelativeImages <span class="token keyword">from</span> <span class="token string">"mdsvex-relative-images"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> rehypeFigure <span class="token keyword">from</span> <span class="token string">"rehype-figure"</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">preprocess</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token function">mdsvex</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      <span class="token literal-property property">extensions</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">".md"</span><span class="token punctuation">,</span> <span class="token string">".mdx"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token literal-property property">remarkPlugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        remarkRelativeImages<span class="token punctuation">,</span>
        <span class="token comment">// ...</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token literal-property property">rehypePlugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">[</span>rehypeFigure<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">className</span><span class="token operator">:</span> <span class="token string">"my-class"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token comment">// ...</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token comment">// ...</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token comment">// ...</span></code>`,da,T,P,Y,Qa,fa,F,Xa,ma,q,Vs=`<code class="language-markdown">lorem ipsum blah blah blah

<span class="token url"><span class="token operator">!</span>[<span class="token content">alt text</span>](<span class="token url">./face.jpg?w=600&amp;webp</span>)</span>

lorem ipsum blah blah blah</code>`,ga,z,Ya,ya,h,Za,Z,$a,as,$,ss,ts,aa,es,ns,sa,os,ps,va,R,Ws=`<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/assets/face-hash459.webp<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Alt text<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>

<span class="token comment">&lt;!-- converted into --></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>figure</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my-class<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/assets/face-hash459.webp<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Alt text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>figcaption</span><span class="token punctuation">></span></span>Alt text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>figcaption</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>figure</span><span class="token punctuation">></span></span></code>`,wa,g,ls,ta,is,rs,ea,cs,us,ba,U,ks;return{c(){v=p("p"),_a=e("There are plenty of guides online on how to setup a svelte + markdown based blog app, but they seem to be missing one key ingredient: how to attach images to your articles and manage all the post-processing and optimisations on them. So, I figured I’ll throw together a short guide, maybe it’ll help someone."),na=u(),w=p("h2"),b=p("a"),B=p("span"),xa=e("Step 1, the imagetools"),oa=u(),E=p("p"),Ta=e(`The first thing you need to add — and that’s regardless whether it’s a blog app or any other type of svelte apps — is the
`),H=p("a"),Pa=e("vite-imagetools"),ja=e(" plugin to your vite setup:"),pa=u(),M=p("pre"),la=u(),N=p("p"),Aa=e(`What it does, it enables image optimisation and preprocessing for all the image assets in your Svelte/Vite based application.
Once that is installed, you can configure the optimisation preferences for the images you’re importing in your app:`),ia=u(),L=p("pre"),ra=u(),d=p("p"),Ha=e("Here by adding the "),K=p("code"),Ma=e("?w=400&webp"),La=e(" query string to the end of the original image file, I asked the image to be resided to the width of "),G=p("code"),Sa=e("400px"),Ca=e(" and converted to the "),J=p("code"),Ia=e("webp"),Oa=e(" format. This way you can do all sorts of magic, like having multiple sizes of the same original image for different devices, change formats, etc."),ca=u(),_=p("h2"),x=p("a"),Q=p("span"),Da=e("Step 2, add markdown plugins"),ua=u(),f=p("p"),qa=e("The great thing about "),S=p("a"),Ra=e("mdsvex"),Na=e(` — the default svelte markdown processor — is that it supports the
`),C=p("a"),Fa=e("remark"),za=e(` and
`),I=p("a"),Ua=e("rehype"),Va=e(" plugins ecosystems. Long story short, remark adds features to convert markdown to HTML, and rehype adds features to convert HTML to HTML; as in post-process HTML itself."),ka=u(),m=p("p"),Wa=e(`To make this thing work, you will need two plugins. The first one is a remark plugin called
`),O=p("a"),Ba=e("mdsvex-relative-images"),Ka=e(`. And the second one
is a rehype plugin called [https://github.com/josestg/rehype-figure]. Import them both and add them to your `),X=p("code"),Ga=e("svelte.config.js"),Ja=e(`
file in your mdsvex config like so:`),ha=u(),D=p("pre"),da=u(),T=p("h2"),P=p("a"),Y=p("span"),Qa=e("Profit"),fa=u(),F=p("p"),Xa=e("A now a bit of explanation how it all works. The relative images plugin allows you to refer to local images that usually live next to your markdown file, like so:"),ma=u(),q=p("pre"),ga=u(),z=p("p"),Ya=e("The plugin will not only automatically sort out the paths and file locations, but also shovel your o/g images through the imagetools optimisation pipeline. This way you can keep your o/g images in high res and whatever format, and control how they will be actually deployed in the production build."),ya=u(),h=p("p"),Za=e("The first plugin will produce a regular "),Z=p("code"),$a=e("<img />"),as=e(" tag, which is less than ideal for styling purposes, and that is why you need the "),$=p("code"),ss=e("rehype-figure"),ts=e(" plugin, which will turn your vanilla "),aa=p("code"),es=e("<img />"),ns=e(" tag into a proper "),sa=p("code"),os=e("<figure>"),ps=e(" envelope:"),va=u(),R=p("pre"),wa=u(),g=p("p"),ls=e("It also will neatly place the "),ta=p("code"),is=e("figure"),rs=e(" tag in between the "),ea=p("code"),cs=e("p"),us=e(" text blocks, which is a way easier to style nicely."),ba=u(),U=p("p"),ks=e("And, that’s pretty much the whole story. Enjoy!"),this.h()},l(a){v=l(a,"P",{});var o=i(v);_a=n(o,"There are plenty of guides online on how to setup a svelte + markdown based blog app, but they seem to be missing one key ingredient: how to attach images to your articles and manage all the post-processing and optimisations on them. So, I figured I’ll throw together a short guide, maybe it’ll help someone."),o.forEach(s),na=k(a),w=l(a,"H2",{id:!0});var hs=i(w);b=l(hs,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var gs=i(b);B=l(gs,"SPAN",{class:!0}),i(B).forEach(s),gs.forEach(s),xa=n(hs,"Step 1, the imagetools"),hs.forEach(s),oa=k(a),E=l(a,"P",{});var Ea=i(E);Ta=n(Ea,`The first thing you need to add — and that’s regardless whether it’s a blog app or any other type of svelte apps — is the
`),H=l(Ea,"A",{href:!0,rel:!0});var ys=i(H);Pa=n(ys,"vite-imagetools"),ys.forEach(s),ja=n(Ea," plugin to your vite setup:"),Ea.forEach(s),pa=k(a),M=l(a,"PRE",{class:!0});var Bs=i(M);Bs.forEach(s),la=k(a),N=l(a,"P",{});var vs=i(N);Aa=n(vs,`What it does, it enables image optimisation and preprocessing for all the image assets in your Svelte/Vite based application.
Once that is installed, you can configure the optimisation preferences for the images you’re importing in your app:`),vs.forEach(s),ia=k(a),L=l(a,"PRE",{class:!0});var Ks=i(L);Ks.forEach(s),ra=k(a),d=l(a,"P",{});var j=i(d);Ha=n(j,"Here by adding the "),K=l(j,"CODE",{});var ws=i(K);Ma=n(ws,"?w=400&webp"),ws.forEach(s),La=n(j," query string to the end of the original image file, I asked the image to be resided to the width of "),G=l(j,"CODE",{});var bs=i(G);Sa=n(bs,"400px"),bs.forEach(s),Ca=n(j," and converted to the "),J=l(j,"CODE",{});var Es=i(J);Ia=n(Es,"webp"),Es.forEach(s),Oa=n(j," format. This way you can do all sorts of magic, like having multiple sizes of the same original image for different devices, change formats, etc."),j.forEach(s),ca=k(a),_=l(a,"H2",{id:!0});var ds=i(_);x=l(ds,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var _s=i(x);Q=l(_s,"SPAN",{class:!0}),i(Q).forEach(s),_s.forEach(s),Da=n(ds,"Step 2, add markdown plugins"),ds.forEach(s),ua=k(a),f=l(a,"P",{});var A=i(f);qa=n(A,"The great thing about "),S=l(A,"A",{href:!0,rel:!0});var xs=i(S);Ra=n(xs,"mdsvex"),xs.forEach(s),Na=n(A,` — the default svelte markdown processor — is that it supports the
`),C=l(A,"A",{href:!0,rel:!0});var Ts=i(C);Fa=n(Ts,"remark"),Ts.forEach(s),za=n(A,` and
`),I=l(A,"A",{href:!0,rel:!0});var Ps=i(I);Ua=n(Ps,"rehype"),Ps.forEach(s),Va=n(A," plugins ecosystems. Long story short, remark adds features to convert markdown to HTML, and rehype adds features to convert HTML to HTML; as in post-process HTML itself."),A.forEach(s),ka=k(a),m=l(a,"P",{});var V=i(m);Wa=n(V,`To make this thing work, you will need two plugins. The first one is a remark plugin called
`),O=l(V,"A",{href:!0,rel:!0});var js=i(O);Ba=n(js,"mdsvex-relative-images"),js.forEach(s),Ka=n(V,`. And the second one
is a rehype plugin called [https://github.com/josestg/rehype-figure]. Import them both and add them to your `),X=l(V,"CODE",{});var As=i(X);Ga=n(As,"svelte.config.js"),As.forEach(s),Ja=n(V,`
file in your mdsvex config like so:`),V.forEach(s),ha=k(a),D=l(a,"PRE",{class:!0});var Gs=i(D);Gs.forEach(s),da=k(a),T=l(a,"H2",{id:!0});var fs=i(T);P=l(fs,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Hs=i(P);Y=l(Hs,"SPAN",{class:!0}),i(Y).forEach(s),Hs.forEach(s),Qa=n(fs,"Profit"),fs.forEach(s),fa=k(a),F=l(a,"P",{});var Ms=i(F);Xa=n(Ms,"A now a bit of explanation how it all works. The relative images plugin allows you to refer to local images that usually live next to your markdown file, like so:"),Ms.forEach(s),ma=k(a),q=l(a,"PRE",{class:!0});var Js=i(q);Js.forEach(s),ga=k(a),z=l(a,"P",{});var Ls=i(z);Ya=n(Ls,"The plugin will not only automatically sort out the paths and file locations, but also shovel your o/g images through the imagetools optimisation pipeline. This way you can keep your o/g images in high res and whatever format, and control how they will be actually deployed in the production build."),Ls.forEach(s),ya=k(a),h=l(a,"P",{});var y=i(h);Za=n(y,"The first plugin will produce a regular "),Z=l(y,"CODE",{});var Ss=i(Z);$a=n(Ss,"<img />"),Ss.forEach(s),as=n(y," tag, which is less than ideal for styling purposes, and that is why you need the "),$=l(y,"CODE",{});var Cs=i($);ss=n(Cs,"rehype-figure"),Cs.forEach(s),ts=n(y," plugin, which will turn your vanilla "),aa=l(y,"CODE",{});var Is=i(aa);es=n(Is,"<img />"),Is.forEach(s),ns=n(y," tag into a proper "),sa=l(y,"CODE",{});var Os=i(sa);os=n(Os,"<figure>"),Os.forEach(s),ps=n(y," envelope:"),y.forEach(s),va=k(a),R=l(a,"PRE",{class:!0});var Qs=i(R);Qs.forEach(s),wa=k(a),g=l(a,"P",{});var W=i(g);ls=n(W,"It also will neatly place the "),ta=l(W,"CODE",{});var Ds=i(ta);is=n(Ds,"figure"),Ds.forEach(s),rs=n(W," tag in between the "),ea=l(W,"CODE",{});var qs=i(ea);cs=n(qs,"p"),qs.forEach(s),us=n(W," text blocks, which is a way easier to style nicely."),W.forEach(s),ba=k(a),U=l(a,"P",{});var Rs=i(U);ks=n(Rs,"And, that’s pretty much the whole story. Enjoy!"),Rs.forEach(s),this.h()},h(){c(B,"class","icon icon-link"),c(b,"aria-hidden","true"),c(b,"tabindex","-1"),c(b,"href","#step-1-the-imagetools"),c(w,"id","step-1-the-imagetools"),c(H,"href","https://www.npmjs.com/package/vite-imagetools"),c(H,"rel","nofollow"),c(M,"class","language-js"),c(L,"class","language-svelte"),c(Q,"class","icon icon-link"),c(x,"aria-hidden","true"),c(x,"tabindex","-1"),c(x,"href","#step-2-add-markdown-plugins"),c(_,"id","step-2-add-markdown-plugins"),c(S,"href","https://mdsvex.pngwn.io"),c(S,"rel","nofollow"),c(C,"href","https://github.com/remarkjs/remark/blob/main/doc/plugins.md#list-of-plugins"),c(C,"rel","nofollow"),c(I,"href","https://github.com/rehypejs/rehype/blob/main/doc/plugins.md#list-of-plugins"),c(I,"rel","nofollow"),c(O,"href","https://www.npmjs.com/package/mdsvex-relative-images"),c(O,"rel","nofollow"),c(D,"class","language-js"),c(Y,"class","icon icon-link"),c(P,"aria-hidden","true"),c(P,"tabindex","-1"),c(P,"href","#profit"),c(T,"id","profit"),c(q,"class","language-markdown"),c(R,"class","language-html")},m(a,o){r(a,v,o),t(v,_a),r(a,na,o),r(a,w,o),t(w,b),t(b,B),t(w,xa),r(a,oa,o),r(a,E,o),t(E,Ta),t(E,H),t(H,Pa),t(E,ja),r(a,pa,o),r(a,M,o),M.innerHTML=Fs,r(a,la,o),r(a,N,o),t(N,Aa),r(a,ia,o),r(a,L,o),L.innerHTML=zs,r(a,ra,o),r(a,d,o),t(d,Ha),t(d,K),t(K,Ma),t(d,La),t(d,G),t(G,Sa),t(d,Ca),t(d,J),t(J,Ia),t(d,Oa),r(a,ca,o),r(a,_,o),t(_,x),t(x,Q),t(_,Da),r(a,ua,o),r(a,f,o),t(f,qa),t(f,S),t(S,Ra),t(f,Na),t(f,C),t(C,Fa),t(f,za),t(f,I),t(I,Ua),t(f,Va),r(a,ka,o),r(a,m,o),t(m,Wa),t(m,O),t(O,Ba),t(m,Ka),t(m,X),t(X,Ga),t(m,Ja),r(a,ha,o),r(a,D,o),D.innerHTML=Us,r(a,da,o),r(a,T,o),t(T,P),t(P,Y),t(T,Qa),r(a,fa,o),r(a,F,o),t(F,Xa),r(a,ma,o),r(a,q,o),q.innerHTML=Vs,r(a,ga,o),r(a,z,o),t(z,Ya),r(a,ya,o),r(a,h,o),t(h,Za),t(h,Z),t(Z,$a),t(h,as),t(h,$),t($,ss),t(h,ts),t(h,aa),t(aa,es),t(h,ns),t(h,sa),t(sa,os),t(h,ps),r(a,va,o),r(a,R,o),R.innerHTML=Ws,r(a,wa,o),r(a,g,o),t(g,ls),t(g,ta),t(ta,is),t(g,rs),t(g,ea),t(ea,cs),t(g,us),r(a,ba,o),r(a,U,o),t(U,ks)},p:ms,i:ms,o:ms,d(a){a&&s(v),a&&s(na),a&&s(w),a&&s(oa),a&&s(E),a&&s(pa),a&&s(M),a&&s(la),a&&s(N),a&&s(ia),a&&s(L),a&&s(ra),a&&s(d),a&&s(ca),a&&s(_),a&&s(ua),a&&s(f),a&&s(ka),a&&s(m),a&&s(ha),a&&s(D),a&&s(da),a&&s(T),a&&s(fa),a&&s(F),a&&s(ma),a&&s(q),a&&s(ga),a&&s(z),a&&s(ya),a&&s(h),a&&s(va),a&&s(R),a&&s(wa),a&&s(g),a&&s(ba),a&&s(U)}}}const st={slug:"MjU5MjkK",title:"Svelte + Markdown blog images setup",description:"A short guide how to setup image assets processing and optimisation in a svelte+markdown blog",date:"8 Feb 2023",tags:["svelte","javascript"]};class tt extends Xs{constructor(v){super(),Ys(this,v,null,$s,Zs,{})}}export{tt as default,st as metadata};
