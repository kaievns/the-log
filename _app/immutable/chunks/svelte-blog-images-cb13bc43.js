import{S as at,i as st,s as tt,k as o,q as e,a as u,l as p,m as l,r as n,h as s,c as k,n as c,b as r,E as t,B as vs}from"./index-73b08c3b.js";function et(Vs){let v,xa,oa,w,b,K,Ta,pa,E,Pa,M,Aa,ja,la,L,Ws=`<code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> sveltekit <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@sveltejs/kit/vite"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> imagetools <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vite-imagetools"</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token literal-property property">config</span><span class="token operator">:</span> UserConfig <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">sveltekit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">imagetools</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token comment">// ....</span></code>`,ia,z,Ha,ra,S,Bs=`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">import</span> face <span class="token keyword">from</span> <span class="token string">"assets/face.jpg?w=400&amp;webp"</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>face<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span></code>`,ca,f,Ma,G,La,Sa,J,Ca,Ia,Q,Oa,Da,ua,_,x,X,qa,ka,d,Ra,C,Na,Fa,I,za,Ua,O,Va,Wa,ha,m,Ba,D,Ka,Ga,q,Ja,Qa,Y,Xa,Ya,fa,R,Ks=`<code class="language-js"><span class="token keyword">import</span> remarkRelativeImages <span class="token keyword">from</span> <span class="token string">"mdsvex-relative-images"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> rehypeFigure <span class="token keyword">from</span> <span class="token string">"rehype-figure"</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">preprocess</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token function">mdsvex</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      <span class="token literal-property property">extensions</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">".md"</span><span class="token punctuation">,</span> <span class="token string">".mdx"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token literal-property property">remarkPlugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        remarkRelativeImages<span class="token punctuation">,</span>
        <span class="token comment">// ...</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token literal-property property">rehypePlugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">[</span>rehypeFigure<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">className</span><span class="token operator">:</span> <span class="token string">"my-class"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token comment">// ...</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token comment">// ...</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token comment">// ...</span></code>`,da,T,P,Z,Za,ma,U,$a,ga,N,Gs=`<code class="language-markdown">lorem ipsum blah blah blah

<span class="token url"><span class="token operator">!</span>[<span class="token content">alt text</span>](<span class="token url">./face.jpg?w=600&amp;webp</span>)</span>

lorem ipsum blah blah blah</code>`,ya,V,as,va,h,ss,$,ts,es,aa,ns,os,sa,ps,ls,ta,is,rs,wa,F,Js=`<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/assets/face-hash459.webp<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Alt text<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>

<span class="token comment">&lt;!-- converted into --></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>figure</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my-class<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/assets/face-hash459.webp<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Alt text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>figcaption</span><span class="token punctuation">></span></span>Alt text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>figcaption</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>figure</span><span class="token punctuation">></span></span></code>`,ba,g,cs,ea,us,ks,na,hs,fs,Ea,W,ds;return{c(){v=o("p"),xa=e("There are plenty of guides online on how to setup a svelte + markdown based blog app, but they seem to be missing one key ingredient: how to attach images to your articles and manage all the post-processing and optimisations on them. So, I figured I’ll throw together a short guide, maybe it’ll help someone."),oa=u(),w=o("h2"),b=o("a"),K=o("span"),Ta=e("Step 1, the imagetools"),pa=u(),E=o("p"),Pa=e(`The first thing you need to add — and that’s regardless whether it’s a blog app or any other type of svelte apps — is the
`),M=o("a"),Aa=e("vite-imagetools"),ja=e(" plugin to your vite setup:"),la=u(),L=o("pre"),ia=u(),z=o("p"),Ha=e(`What it does, it enables image optimisation and preprocessing for all the image assets in your Svelte/Vite based application.
Once that is installed, you can configure the optimisation preferences for the images you’re importing in your app:`),ra=u(),S=o("pre"),ca=u(),f=o("p"),Ma=e("Here by adding the "),G=o("code"),La=e("?w=400&webp"),Sa=e(" query string to the end of the original image file, I asked the image to be resided to the width of "),J=o("code"),Ca=e("400px"),Ia=e(" and converted to the "),Q=o("code"),Oa=e("webp"),Da=e(" format. This way you can do all sorts of magic, like having multiple sizes of the same original image for different devices, change formats, etc."),ua=u(),_=o("h2"),x=o("a"),X=o("span"),qa=e("Step 2, add markdown plugins"),ka=u(),d=o("p"),Ra=e("The great thing about "),C=o("a"),Na=e("mdsvex"),Fa=e(` — the default svelte markdown processor — is that it supports the
`),I=o("a"),za=e("remark"),Ua=e(` and
`),O=o("a"),Va=e("rehype"),Wa=e(" plugins ecosystems. Long story short, remark adds features to convert markdown to HTML, and rehype adds features to convert HTML to HTML; as in post-process HTML itself."),ha=u(),m=o("p"),Ba=e(`To make this thing work, you will need two plugins. The first one is a remark plugin called
`),D=o("a"),Ka=e("mdsvex-relative-images"),Ga=e(`. And the second one
is a rehype plugin called `),q=o("a"),Ja=e("rehype-figure"),Qa=e(`.
Import them both and add them to your `),Y=o("code"),Xa=e("svelte.config.js"),Ya=e(" file in your mdsvex config like so:"),fa=u(),R=o("pre"),da=u(),T=o("h2"),P=o("a"),Z=o("span"),Za=e("Profit"),ma=u(),U=o("p"),$a=e("A now a bit of explanation how it all works. The relative images plugin allows you to refer to local images that usually live next to your markdown file, like so:"),ga=u(),N=o("pre"),ya=u(),V=o("p"),as=e("The plugin will not only automatically sort out the paths and file locations, but also shovel your o/g images through the imagetools optimisation pipeline. This way you can keep your o/g images in high res and whatever format, and control how they will be actually deployed in the production build."),va=u(),h=o("p"),ss=e("The first plugin will produce a regular "),$=o("code"),ts=e("<img />"),es=e(" tag, which is less than ideal for styling purposes, and that is why you need the "),aa=o("code"),ns=e("rehype-figure"),os=e(" plugin, which will turn your vanilla "),sa=o("code"),ps=e("<img />"),ls=e(" tag into a proper "),ta=o("code"),is=e("<figure>"),rs=e(" envelope:"),wa=u(),F=o("pre"),ba=u(),g=o("p"),cs=e("It also will neatly place the "),ea=o("code"),us=e("figure"),ks=e(" tag in between the "),na=o("code"),hs=e("p"),fs=e(" text blocks, which is a way easier to style nicely."),Ea=u(),W=o("p"),ds=e("And, that’s pretty much the whole story. Enjoy!"),this.h()},l(a){v=p(a,"P",{});var i=l(v);xa=n(i,"There are plenty of guides online on how to setup a svelte + markdown based blog app, but they seem to be missing one key ingredient: how to attach images to your articles and manage all the post-processing and optimisations on them. So, I figured I’ll throw together a short guide, maybe it’ll help someone."),i.forEach(s),oa=k(a),w=p(a,"H2",{id:!0});var ms=l(w);b=p(ms,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var ws=l(b);K=p(ws,"SPAN",{class:!0}),l(K).forEach(s),ws.forEach(s),Ta=n(ms,"Step 1, the imagetools"),ms.forEach(s),pa=k(a),E=p(a,"P",{});var _a=l(E);Pa=n(_a,`The first thing you need to add — and that’s regardless whether it’s a blog app or any other type of svelte apps — is the
`),M=p(_a,"A",{href:!0,rel:!0});var bs=l(M);Aa=n(bs,"vite-imagetools"),bs.forEach(s),ja=n(_a," plugin to your vite setup:"),_a.forEach(s),la=k(a),L=p(a,"PRE",{class:!0});var Qs=l(L);Qs.forEach(s),ia=k(a),z=p(a,"P",{});var Es=l(z);Ha=n(Es,`What it does, it enables image optimisation and preprocessing for all the image assets in your Svelte/Vite based application.
Once that is installed, you can configure the optimisation preferences for the images you’re importing in your app:`),Es.forEach(s),ra=k(a),S=p(a,"PRE",{class:!0});var Xs=l(S);Xs.forEach(s),ca=k(a),f=p(a,"P",{});var A=l(f);Ma=n(A,"Here by adding the "),G=p(A,"CODE",{});var _s=l(G);La=n(_s,"?w=400&webp"),_s.forEach(s),Sa=n(A," query string to the end of the original image file, I asked the image to be resided to the width of "),J=p(A,"CODE",{});var xs=l(J);Ca=n(xs,"400px"),xs.forEach(s),Ia=n(A," and converted to the "),Q=p(A,"CODE",{});var Ts=l(Q);Oa=n(Ts,"webp"),Ts.forEach(s),Da=n(A," format. This way you can do all sorts of magic, like having multiple sizes of the same original image for different devices, change formats, etc."),A.forEach(s),ua=k(a),_=p(a,"H2",{id:!0});var gs=l(_);x=p(gs,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Ps=l(x);X=p(Ps,"SPAN",{class:!0}),l(X).forEach(s),Ps.forEach(s),qa=n(gs,"Step 2, add markdown plugins"),gs.forEach(s),ka=k(a),d=p(a,"P",{});var j=l(d);Ra=n(j,"The great thing about "),C=p(j,"A",{href:!0,rel:!0});var As=l(C);Na=n(As,"mdsvex"),As.forEach(s),Fa=n(j,` — the default svelte markdown processor — is that it supports the
`),I=p(j,"A",{href:!0,rel:!0});var js=l(I);za=n(js,"remark"),js.forEach(s),Ua=n(j,` and
`),O=p(j,"A",{href:!0,rel:!0});var Hs=l(O);Va=n(Hs,"rehype"),Hs.forEach(s),Wa=n(j," plugins ecosystems. Long story short, remark adds features to convert markdown to HTML, and rehype adds features to convert HTML to HTML; as in post-process HTML itself."),j.forEach(s),ha=k(a),m=p(a,"P",{});var H=l(m);Ba=n(H,`To make this thing work, you will need two plugins. The first one is a remark plugin called
`),D=p(H,"A",{href:!0,rel:!0});var Ms=l(D);Ka=n(Ms,"mdsvex-relative-images"),Ms.forEach(s),Ga=n(H,`. And the second one
is a rehype plugin called `),q=p(H,"A",{href:!0,rel:!0});var Ls=l(q);Ja=n(Ls,"rehype-figure"),Ls.forEach(s),Qa=n(H,`.
Import them both and add them to your `),Y=p(H,"CODE",{});var Ss=l(Y);Xa=n(Ss,"svelte.config.js"),Ss.forEach(s),Ya=n(H," file in your mdsvex config like so:"),H.forEach(s),fa=k(a),R=p(a,"PRE",{class:!0});var Ys=l(R);Ys.forEach(s),da=k(a),T=p(a,"H2",{id:!0});var ys=l(T);P=p(ys,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Cs=l(P);Z=p(Cs,"SPAN",{class:!0}),l(Z).forEach(s),Cs.forEach(s),Za=n(ys,"Profit"),ys.forEach(s),ma=k(a),U=p(a,"P",{});var Is=l(U);$a=n(Is,"A now a bit of explanation how it all works. The relative images plugin allows you to refer to local images that usually live next to your markdown file, like so:"),Is.forEach(s),ga=k(a),N=p(a,"PRE",{class:!0});var Zs=l(N);Zs.forEach(s),ya=k(a),V=p(a,"P",{});var Os=l(V);as=n(Os,"The plugin will not only automatically sort out the paths and file locations, but also shovel your o/g images through the imagetools optimisation pipeline. This way you can keep your o/g images in high res and whatever format, and control how they will be actually deployed in the production build."),Os.forEach(s),va=k(a),h=p(a,"P",{});var y=l(h);ss=n(y,"The first plugin will produce a regular "),$=p(y,"CODE",{});var Ds=l($);ts=n(Ds,"<img />"),Ds.forEach(s),es=n(y," tag, which is less than ideal for styling purposes, and that is why you need the "),aa=p(y,"CODE",{});var qs=l(aa);ns=n(qs,"rehype-figure"),qs.forEach(s),os=n(y," plugin, which will turn your vanilla "),sa=p(y,"CODE",{});var Rs=l(sa);ps=n(Rs,"<img />"),Rs.forEach(s),ls=n(y," tag into a proper "),ta=p(y,"CODE",{});var Ns=l(ta);is=n(Ns,"<figure>"),Ns.forEach(s),rs=n(y," envelope:"),y.forEach(s),wa=k(a),F=p(a,"PRE",{class:!0});var $s=l(F);$s.forEach(s),ba=k(a),g=p(a,"P",{});var B=l(g);cs=n(B,"It also will neatly place the "),ea=p(B,"CODE",{});var Fs=l(ea);us=n(Fs,"figure"),Fs.forEach(s),ks=n(B," tag in between the "),na=p(B,"CODE",{});var zs=l(na);hs=n(zs,"p"),zs.forEach(s),fs=n(B," text blocks, which is a way easier to style nicely."),B.forEach(s),Ea=k(a),W=p(a,"P",{});var Us=l(W);ds=n(Us,"And, that’s pretty much the whole story. Enjoy!"),Us.forEach(s),this.h()},h(){c(K,"class","icon icon-link"),c(b,"aria-hidden","true"),c(b,"tabindex","-1"),c(b,"href","#step-1-the-imagetools"),c(w,"id","step-1-the-imagetools"),c(M,"href","https://www.npmjs.com/package/vite-imagetools"),c(M,"rel","nofollow"),c(L,"class","language-js"),c(S,"class","language-svelte"),c(X,"class","icon icon-link"),c(x,"aria-hidden","true"),c(x,"tabindex","-1"),c(x,"href","#step-2-add-markdown-plugins"),c(_,"id","step-2-add-markdown-plugins"),c(C,"href","https://mdsvex.pngwn.io"),c(C,"rel","nofollow"),c(I,"href","https://github.com/remarkjs/remark/blob/main/doc/plugins.md#list-of-plugins"),c(I,"rel","nofollow"),c(O,"href","https://github.com/rehypejs/rehype/blob/main/doc/plugins.md#list-of-plugins"),c(O,"rel","nofollow"),c(D,"href","https://www.npmjs.com/package/mdsvex-relative-images"),c(D,"rel","nofollow"),c(q,"href","https://github.com/josestg/rehype-figure"),c(q,"rel","nofollow"),c(R,"class","language-js"),c(Z,"class","icon icon-link"),c(P,"aria-hidden","true"),c(P,"tabindex","-1"),c(P,"href","#profit"),c(T,"id","profit"),c(N,"class","language-markdown"),c(F,"class","language-html")},m(a,i){r(a,v,i),t(v,xa),r(a,oa,i),r(a,w,i),t(w,b),t(b,K),t(w,Ta),r(a,pa,i),r(a,E,i),t(E,Pa),t(E,M),t(M,Aa),t(E,ja),r(a,la,i),r(a,L,i),L.innerHTML=Ws,r(a,ia,i),r(a,z,i),t(z,Ha),r(a,ra,i),r(a,S,i),S.innerHTML=Bs,r(a,ca,i),r(a,f,i),t(f,Ma),t(f,G),t(G,La),t(f,Sa),t(f,J),t(J,Ca),t(f,Ia),t(f,Q),t(Q,Oa),t(f,Da),r(a,ua,i),r(a,_,i),t(_,x),t(x,X),t(_,qa),r(a,ka,i),r(a,d,i),t(d,Ra),t(d,C),t(C,Na),t(d,Fa),t(d,I),t(I,za),t(d,Ua),t(d,O),t(O,Va),t(d,Wa),r(a,ha,i),r(a,m,i),t(m,Ba),t(m,D),t(D,Ka),t(m,Ga),t(m,q),t(q,Ja),t(m,Qa),t(m,Y),t(Y,Xa),t(m,Ya),r(a,fa,i),r(a,R,i),R.innerHTML=Ks,r(a,da,i),r(a,T,i),t(T,P),t(P,Z),t(T,Za),r(a,ma,i),r(a,U,i),t(U,$a),r(a,ga,i),r(a,N,i),N.innerHTML=Gs,r(a,ya,i),r(a,V,i),t(V,as),r(a,va,i),r(a,h,i),t(h,ss),t(h,$),t($,ts),t(h,es),t(h,aa),t(aa,ns),t(h,os),t(h,sa),t(sa,ps),t(h,ls),t(h,ta),t(ta,is),t(h,rs),r(a,wa,i),r(a,F,i),F.innerHTML=Js,r(a,ba,i),r(a,g,i),t(g,cs),t(g,ea),t(ea,us),t(g,ks),t(g,na),t(na,hs),t(g,fs),r(a,Ea,i),r(a,W,i),t(W,ds)},p:vs,i:vs,o:vs,d(a){a&&s(v),a&&s(oa),a&&s(w),a&&s(pa),a&&s(E),a&&s(la),a&&s(L),a&&s(ia),a&&s(z),a&&s(ra),a&&s(S),a&&s(ca),a&&s(f),a&&s(ua),a&&s(_),a&&s(ka),a&&s(d),a&&s(ha),a&&s(m),a&&s(fa),a&&s(R),a&&s(da),a&&s(T),a&&s(ma),a&&s(U),a&&s(ga),a&&s(N),a&&s(ya),a&&s(V),a&&s(va),a&&s(h),a&&s(wa),a&&s(F),a&&s(ba),a&&s(g),a&&s(Ea),a&&s(W)}}}const ot={slug:"MjU5MjkK",title:"Svelte + Markdown blog images setup",description:"A short guide how to setup image assets processing and optimisation in a svelte+markdown blog",date:"8 Feb 2023",tags:["svelte","javascript"]};class pt extends at{constructor(v){super(),st(this,v,null,et,tt,{})}}export{pt as default,ot as metadata};
