import{S as Qa,i as Za,s as en,k as l,q as r,a as p,l as o,m as i,r as u,h as s,c,n as h,b as a,F as n,C as Ft}from"./index-920be987.js";function sn(ga){let b,As,Re,V,Os,Le,W,Hs,Ne,v,y,ke,Rs,De,Y,Ls,Ce,w,Ns,be,Ds,Cs,Be,$,Bs,Fe,H,Pa=`<code class="language-sh"><span class="token function">sudo</span> <span class="token function">apt</span> update  
<span class="token function">sudo</span> <span class="token function">apt</span> upgrade
<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">nano</span> btop</code>`,je,E,Fs,ve,js,qs,qe,R,Ia=`<code class="language-sh"><span class="token function">sudo</span> swapoff <span class="token parameter variable">-a</span>
<span class="token function">sudo</span> <span class="token function">nano</span> /etc/fstab

<span class="token function">sudo</span> <span class="token function">reboot</span></code>`,Ge,z,Gs,Ue,_,g,ye,Us,Ke,X,Ks,Je,L,Ta=`<code class="language-sh"><span class="token function">sudo</span> snap <span class="token function">install</span> microk8s <span class="token parameter variable">--classic</span>
<span class="token function">sudo</span> snap <span class="token function">install</span> canonical-livepatch</code>`,Ve,Q,Js,We,Z,Vs,Ye,N,xa=`<code class="language-sh"><span class="token function">sudo</span> microk8s status --wait-ready
<span class="token function">sudo</span> microk8s disable ha-cluster <span class="token parameter variable">--force</span>

<span class="token function">sudo</span> microk8s add-node</code>`,$e,f,Ws,we,Ys,$s,Ee,zs,Xs,ze,ee,Qs,Xe,D,Sa='<code class="language-sh">microk8s <span class="token function">join</span> <span class="token number">192.168</span>.62.61:<span class="token punctuation">[</span>LONG SECRET STRING<span class="token punctuation">]</span></code>',Qe,d,Zs,_e,et,st,ge,tt,at,Ze,m,nt,Pe,lt,ot,Ie,it,rt,es,P,I,Te,ut,ss,se,pt,ts,C,Ma=`<code class="language-sh"><span class="token function">sudo</span> <span class="token function">usermod</span> <span class="token parameter variable">-a</span> <span class="token parameter variable">-G</span> microk8s <span class="token environment constant">$USER</span>
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> ~/.kube
<span class="token function">chmod</span> 0700 ~/.kube

<span class="token builtin class-name">echo</span> <span class="token string">"alias kubectl='microk8s kubectl'"</span> <span class="token operator">>></span> ~/.bashrc
<span class="token builtin class-name">echo</span> <span class="token string">"alias helm='microk8s helm'"</span> <span class="token operator">>></span> ~/.bashrc
<span class="token builtin class-name">echo</span> <span class="token string">"export EDITOR=nano"</span> <span class="token operator">>></span> ~/.bashrc
<span class="token builtin class-name">source</span> ~/.bashrc 

<span class="token function">su</span> - <span class="token environment constant">$USER</span></code>`,as,te,ct,ns,B,Aa=`<code class="language-sh">microk8s <span class="token builtin class-name">enable</span> dns
microk8s <span class="token builtin class-name">enable</span> ingress</code>`,ls,T,ht,xe,ft,dt,os,k,mt,Se,kt,bt,Me,vt,yt,is,x,S,Ae,wt,rs,ae,Et,us,F,Oa=`<code class="language-sh">microk8s <span class="token builtin class-name">enable</span> dashboard

kubectl apply <span class="token parameter variable">-f</span> - <span class="token operator">&lt;&lt;</span><span class="token string">EOF
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: kubernetes-dashboard
  namespace: kube-system
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: HTTPS
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/ssl-passthrough: "true"
    nginx.ingress.kubernetes.io/whitelist-source-range: 127.0.0.1/8,192.168.0.0/16
spec:
  ingressClassName: public
  rules:
  - host: [YOUR LOCAL DOMAIN NAME GOES HERE]
    http:
      paths:
      - backend:
          service:
            name: kubernetes-dashboard
            port:
              number: 443
        path: /
        pathType: Prefix
EOF</span></code>`,ps,ne,_t,cs,le,gt,hs,j,Ha='<code class="language-sh">kubectl describe secret <span class="token parameter variable">-n</span> kube-system microk8s-dashboard-token</code>',fs,oe,Pt,ds,q,Ra=`<code class="language-sh"><span class="token function">sudo</span> ufw allow http  
<span class="token function">sudo</span> ufw allow https</code>`,ms,M,A,Oe,It,ks,ie,Tt,bs,re,xt,vs,G,La=`<code class="language-sh">helm repo <span class="token function">add</span> longhorn https://charts.longhorn.io
helm repo update</code>`,ys,ue,St,ws,U,Na=`<code class="language-sh">kubectl create namespace longhorn
helm <span class="token function">install</span> longhorn longhorn/longhorn <span class="token parameter variable">--namespace</span> longhorn <span class="token punctuation"></span>
  <span class="token parameter variable">--set</span> <span class="token assign-left variable">defaultSettings.defaultDataPath</span><span class="token operator">=</span><span class="token string">"/longhorn"</span> <span class="token punctuation"></span>
  <span class="token parameter variable">--set</span> <span class="token assign-left variable">csi.kubeletRootDir</span><span class="token operator">=</span><span class="token string">"/var/snap/microk8s/common/var/lib/kubelet"</span></code>`,Es,pe,Mt,_s,K,Da='<code class="language-sh">kubectl <span class="token parameter variable">-n</span> longhorn get pods</code>',gs,ce,At,Ps,J,Ca=`<code class="language-sh"><span class="token function">cat</span> <span class="token operator">&lt;&lt;</span><span class="token string">EOF<span class="token bash punctuation"> <span class="token operator">|</span> microk8s kubectl apply <span class="token parameter variable">-f</span> -</span>
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: longhorn
  namespace: longhorn
  annotations:
    nginx.ingress.kubernetes.io/whitelist-source-range: 127.0.0.1/8,192.168.0.0/16
spec:
  rules:
  - host: [LONGHORN LOCAL DNS NAME]
    http:
      paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: longhorn-frontend
              port:
                number: 80
EOF</span></code>`,Is,O,Ot,He,Ht,Rt;return{c(){b=l("p"),As=r("I run almost everything in my homelab in a kubernetes cluster. There is no other reason to that other than my personal preference tbh, so I’m not going to dive into the why kubes topic here. But, I think I’ll have to give the microk8s over k3s idea a bit of an explanation though."),Re=p(),V=l("p"),Os=r("Traditionally k3s is the go to choice for anything small like a homelab; and it’s great! But, lately, I spent some quality time with microk8s and ended up liking it a lot. To the point where i have chosen it over k3s for my homelab. Mostly because how low touch it is to setup and maintain a baseline cluster, and how well it is integrated with ubuntu ecosystem."),Le=p(),W=l("p"),Hs=r("Unfortunately, microk8s being a bit of a niche choice, the documentation might be a bit sparse. So, I figured an extra tutorial won’t hurt, and hence the article. I’ll walk you through my choices as we go through them."),Ne=p(),v=l("h2"),y=l("a"),ke=l("span"),Rs=r("Initial server setup"),De=p(),Y=l("p"),Ls=r("I’m presuming here that we have a fresh ubuntu server 24.04 installed on two machines. It could be a full or a minimal setup, doesn’t particularly matter. One of them will me main server and another is a secondary worker. Again, you might have more than two units in your cluster, it doesn’t matter either; you’ll just have to repeat a few steps on those extra machines."),Ce=p(),w=l("p"),Ns=r("I strongly recommend setting up SSH on each node though. I mean unless you "),be=l("em"),Ds=r("really"),Cs=r(" want to manually type all the commands below in terminals for some reason. All my infra lives behind firewalls so, to me an SSH connection is a nobrainer."),Be=p(),$=l("p"),Bs=r("Okay, with that out of the way, first off lets run the updates and add couple of standard tools"),Fe=p(),H=l("pre"),je=p(),E=l("p"),Fs=r("Second, you want to disable swap on all of your machines, and comment out the swap line of your "),ve=l("code"),js=r("fstab"),qs=r(" file, then reboot. Long story short for this is that kubes resources scheduler gets real confused when your pod ends up in swap"),qe=p(),R=l("pre"),Ge=p(),z=l("p"),Gs=r("Than brings us to the base line setup."),Ue=p(),_=l("h2"),g=l("a"),ye=l("span"),Us=r("Kubes install"),Ke=p(),X=l("p"),Ks=r("Once your machines are back from the reboot run those two"),Je=p(),L=l("pre"),Ve=p(),Q=l("p"),Js=r("The first one installs microk8s and the second one installs kernel livepatch. Technically you don’t need the second one, but we also don’t need to be backward savages either."),We=p(),Z=l("p"),Vs=r("Once that’s done switch to the master node and run the following"),Ye=p(),N=l("pre"),$e=p(),f=l("p"),Ws=r("The first one waits for the kubes instance to boot. By default it will boot in high availability mode, running extra stuff on your nodes. For homelab purposes I don’t really need that and could easily suffer an occasional reboot if I have to. So the second command will disable all of that and switch the cluster to use "),we=l("code"),Ys=r("flaneld"),$s=r(" and "),Ee=l("code"),zs=r("etcd"),Xs=r(" similar to k3s default setup."),ze=p(),ee=l("p"),Qs=r("The last command will spit out a command that looks something like this:"),Xe=p(),D=l("pre"),Qe=p(),d=l("p"),Zs=r("copy that command, add "),_e=l("code"),et=r("sudo"),st=r(" in front of it and run that on "),ge=l("em"),tt=r("every"),at=r(" worker node. this will connect all your nodes in a single kubernetes cluster."),Ze=p(),m=l("p"),nt=r("From this point on, everything you do runs from the "),Pe=l("em"),lt=r("main"),ot=r(" node "),Ie=l("em"),it=r("only"),rt=r("!"),es=p(),P=l("h2"),I=l("a"),Te=l("span"),ut=r("Initial tooling setup"),ss=p(),se=l("p"),pt=r("Start by running the following, it will install aliases and such for you to move forward. Microk8s is actually pretty handy as it comes with all the tools, including helm preinstalled and namespaced:"),ts=p(),C=l("pre"),as=p(),te=l("p"),ct=r("After that you want to enable the following two addons:"),ns=p(),B=l("pre"),ls=p(),T=l("p"),ht=r("The first one installs CoreDNS to resolve kubes "),xe=l("em"),ft=r("internal"),dt=r(" DNS names, the second one will install nginx based reverse proxy to serve as an ingress controller for all your kubes services."),os=p(),k=l("p"),mt=r("Technically you might want to choose "),Se=l("code"),kt=r("traefik"),bt=r(" over the "),Me=l("code"),vt=r("nginx"),yt=r(" to follow the k3s standards, it is also available as an addon in microk8s, but it will basically do a bare bone helm install under the hood and you’ll be on your own after that. I’m a huge fan of traefik and its design, but i’m not a huge fun of chugging lots of custom yaml files around. In my experience the default nginx ingress server just as lightweight and better overall integrated with microk8s ecosystem. So I use that as the default option."),is=p(),x=l("h2"),S=l("a"),Ae=l("span"),wt=r("Kubes dashboard"),rs=p(),ae=l("p"),Et=r("Microk8s doesn’t come with Rancher for obvious reasons, but it has the standard kubernetes dashboard available as a plugin. Which serves me just fine."),us=p(),F=l("pre"),ps=p(),ne=l("p"),_t=r("The first command will install everything except an ingress config. I honestly don’t know why not. But, that’s a consistent choice with all the plugins in microk8s. And chucking it in doesn’t take long."),cs=p(),le=l("p"),gt=r("To access your dashboard you’ll need a token which you get with the following command."),hs=p(),j=l("pre"),fs=p(),oe=l("p"),Pt=r("By default there is no firewall enabled in ubuntu server. But, if you have a firewall running on your main node, you might want to run the following to open the ports:"),ds=p(),q=l("pre"),ms=p(),M=l("h2"),A=l("a"),Oe=l("span"),It=r("Longhorn"),ks=p(),ie=l("p"),Tt=r("Microk8s comes with several options for storage. It’s not like I particularly dislike any of them, it’s just I really like longhorn. I always had a solid experience with the thing and it’s super simple to install."),bs=p(),re=l("p"),xt=r("First add the helm repo"),vs=p(),G=l("pre"),ys=p(),ue=l("p"),St=r("Then run the following to install it"),ws=p(),U=l("pre"),Es=p(),pe=l("p"),Mt=r("Then watch the pods until you see them all spawn everything"),_s=p(),K=l("pre"),gs=p(),ce=l("p"),At=r("After that the only thing you’ll need is to add an ingress controller."),Ps=p(),J=l("pre"),Is=p(),O=l("p"),Ot=r("And that’s pretty much all to it. Just add the DNS names into your "),He=l("code"),Ht=r("/etc/hosts"),Rt=r(" and you should be good to go."),this.h()},l(e){b=o(e,"P",{});var t=i(b);As=u(t,"I run almost everything in my homelab in a kubernetes cluster. There is no other reason to that other than my personal preference tbh, so I’m not going to dive into the why kubes topic here. But, I think I’ll have to give the microk8s over k3s idea a bit of an explanation though."),t.forEach(s),Re=c(e),V=o(e,"P",{});var jt=i(V);Os=u(jt,"Traditionally k3s is the go to choice for anything small like a homelab; and it’s great! But, lately, I spent some quality time with microk8s and ended up liking it a lot. To the point where i have chosen it over k3s for my homelab. Mostly because how low touch it is to setup and maintain a baseline cluster, and how well it is integrated with ubuntu ecosystem."),jt.forEach(s),Le=c(e),W=o(e,"P",{});var qt=i(W);Hs=u(qt,"Unfortunately, microk8s being a bit of a niche choice, the documentation might be a bit sparse. So, I figured an extra tutorial won’t hurt, and hence the article. I’ll walk you through my choices as we go through them."),qt.forEach(s),Ne=c(e),v=o(e,"H2",{id:!0});var Lt=i(v);y=o(Lt,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Gt=i(y);ke=o(Gt,"SPAN",{class:!0}),i(ke).forEach(s),Gt.forEach(s),Rs=u(Lt,"Initial server setup"),Lt.forEach(s),De=c(e),Y=o(e,"P",{});var Ut=i(Y);Ls=u(Ut,"I’m presuming here that we have a fresh ubuntu server 24.04 installed on two machines. It could be a full or a minimal setup, doesn’t particularly matter. One of them will me main server and another is a secondary worker. Again, you might have more than two units in your cluster, it doesn’t matter either; you’ll just have to repeat a few steps on those extra machines."),Ut.forEach(s),Ce=c(e),w=o(e,"P",{});var Ts=i(w);Ns=u(Ts,"I strongly recommend setting up SSH on each node though. I mean unless you "),be=o(Ts,"EM",{});var Kt=i(be);Ds=u(Kt,"really"),Kt.forEach(s),Cs=u(Ts," want to manually type all the commands below in terminals for some reason. All my infra lives behind firewalls so, to me an SSH connection is a nobrainer."),Ts.forEach(s),Be=c(e),$=o(e,"P",{});var Jt=i($);Bs=u(Jt,"Okay, with that out of the way, first off lets run the updates and add couple of standard tools"),Jt.forEach(s),Fe=c(e),H=o(e,"PRE",{class:!0});var Ba=i(H);Ba.forEach(s),je=c(e),E=o(e,"P",{});var xs=i(E);Fs=u(xs,"Second, you want to disable swap on all of your machines, and comment out the swap line of your "),ve=o(xs,"CODE",{});var Vt=i(ve);js=u(Vt,"fstab"),Vt.forEach(s),qs=u(xs," file, then reboot. Long story short for this is that kubes resources scheduler gets real confused when your pod ends up in swap"),xs.forEach(s),qe=c(e),R=o(e,"PRE",{class:!0});var Fa=i(R);Fa.forEach(s),Ge=c(e),z=o(e,"P",{});var Wt=i(z);Gs=u(Wt,"Than brings us to the base line setup."),Wt.forEach(s),Ue=c(e),_=o(e,"H2",{id:!0});var Nt=i(_);g=o(Nt,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Yt=i(g);ye=o(Yt,"SPAN",{class:!0}),i(ye).forEach(s),Yt.forEach(s),Us=u(Nt,"Kubes install"),Nt.forEach(s),Ke=c(e),X=o(e,"P",{});var $t=i(X);Ks=u($t,"Once your machines are back from the reboot run those two"),$t.forEach(s),Je=c(e),L=o(e,"PRE",{class:!0});var ja=i(L);ja.forEach(s),Ve=c(e),Q=o(e,"P",{});var zt=i(Q);Js=u(zt,"The first one installs microk8s and the second one installs kernel livepatch. Technically you don’t need the second one, but we also don’t need to be backward savages either."),zt.forEach(s),We=c(e),Z=o(e,"P",{});var Xt=i(Z);Vs=u(Xt,"Once that’s done switch to the master node and run the following"),Xt.forEach(s),Ye=c(e),N=o(e,"PRE",{class:!0});var qa=i(N);qa.forEach(s),$e=c(e),f=o(e,"P",{});var he=i(f);Ws=u(he,"The first one waits for the kubes instance to boot. By default it will boot in high availability mode, running extra stuff on your nodes. For homelab purposes I don’t really need that and could easily suffer an occasional reboot if I have to. So the second command will disable all of that and switch the cluster to use "),we=o(he,"CODE",{});var Qt=i(we);Ys=u(Qt,"flaneld"),Qt.forEach(s),$s=u(he," and "),Ee=o(he,"CODE",{});var Zt=i(Ee);zs=u(Zt,"etcd"),Zt.forEach(s),Xs=u(he," similar to k3s default setup."),he.forEach(s),ze=c(e),ee=o(e,"P",{});var ea=i(ee);Qs=u(ea,"The last command will spit out a command that looks something like this:"),ea.forEach(s),Xe=c(e),D=o(e,"PRE",{class:!0});var Ga=i(D);Ga.forEach(s),Qe=c(e),d=o(e,"P",{});var fe=i(d);Zs=u(fe,"copy that command, add "),_e=o(fe,"CODE",{});var sa=i(_e);et=u(sa,"sudo"),sa.forEach(s),st=u(fe," in front of it and run that on "),ge=o(fe,"EM",{});var ta=i(ge);tt=u(ta,"every"),ta.forEach(s),at=u(fe," worker node. this will connect all your nodes in a single kubernetes cluster."),fe.forEach(s),Ze=c(e),m=o(e,"P",{});var de=i(m);nt=u(de,"From this point on, everything you do runs from the "),Pe=o(de,"EM",{});var aa=i(Pe);lt=u(aa,"main"),aa.forEach(s),ot=u(de," node "),Ie=o(de,"EM",{});var na=i(Ie);it=u(na,"only"),na.forEach(s),rt=u(de,"!"),de.forEach(s),es=c(e),P=o(e,"H2",{id:!0});var Dt=i(P);I=o(Dt,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var la=i(I);Te=o(la,"SPAN",{class:!0}),i(Te).forEach(s),la.forEach(s),ut=u(Dt,"Initial tooling setup"),Dt.forEach(s),ss=c(e),se=o(e,"P",{});var oa=i(se);pt=u(oa,"Start by running the following, it will install aliases and such for you to move forward. Microk8s is actually pretty handy as it comes with all the tools, including helm preinstalled and namespaced:"),oa.forEach(s),ts=c(e),C=o(e,"PRE",{class:!0});var Ua=i(C);Ua.forEach(s),as=c(e),te=o(e,"P",{});var ia=i(te);ct=u(ia,"After that you want to enable the following two addons:"),ia.forEach(s),ns=c(e),B=o(e,"PRE",{class:!0});var Ka=i(B);Ka.forEach(s),ls=c(e),T=o(e,"P",{});var Ss=i(T);ht=u(Ss,"The first one installs CoreDNS to resolve kubes "),xe=o(Ss,"EM",{});var ra=i(xe);ft=u(ra,"internal"),ra.forEach(s),dt=u(Ss," DNS names, the second one will install nginx based reverse proxy to serve as an ingress controller for all your kubes services."),Ss.forEach(s),os=c(e),k=o(e,"P",{});var me=i(k);mt=u(me,"Technically you might want to choose "),Se=o(me,"CODE",{});var ua=i(Se);kt=u(ua,"traefik"),ua.forEach(s),bt=u(me," over the "),Me=o(me,"CODE",{});var pa=i(Me);vt=u(pa,"nginx"),pa.forEach(s),yt=u(me," to follow the k3s standards, it is also available as an addon in microk8s, but it will basically do a bare bone helm install under the hood and you’ll be on your own after that. I’m a huge fan of traefik and its design, but i’m not a huge fun of chugging lots of custom yaml files around. In my experience the default nginx ingress server just as lightweight and better overall integrated with microk8s ecosystem. So I use that as the default option."),me.forEach(s),is=c(e),x=o(e,"H2",{id:!0});var Ct=i(x);S=o(Ct,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var ca=i(S);Ae=o(ca,"SPAN",{class:!0}),i(Ae).forEach(s),ca.forEach(s),wt=u(Ct,"Kubes dashboard"),Ct.forEach(s),rs=c(e),ae=o(e,"P",{});var ha=i(ae);Et=u(ha,"Microk8s doesn’t come with Rancher for obvious reasons, but it has the standard kubernetes dashboard available as a plugin. Which serves me just fine."),ha.forEach(s),us=c(e),F=o(e,"PRE",{class:!0});var Ja=i(F);Ja.forEach(s),ps=c(e),ne=o(e,"P",{});var fa=i(ne);_t=u(fa,"The first command will install everything except an ingress config. I honestly don’t know why not. But, that’s a consistent choice with all the plugins in microk8s. And chucking it in doesn’t take long."),fa.forEach(s),cs=c(e),le=o(e,"P",{});var da=i(le);gt=u(da,"To access your dashboard you’ll need a token which you get with the following command."),da.forEach(s),hs=c(e),j=o(e,"PRE",{class:!0});var Va=i(j);Va.forEach(s),fs=c(e),oe=o(e,"P",{});var ma=i(oe);Pt=u(ma,"By default there is no firewall enabled in ubuntu server. But, if you have a firewall running on your main node, you might want to run the following to open the ports:"),ma.forEach(s),ds=c(e),q=o(e,"PRE",{class:!0});var Wa=i(q);Wa.forEach(s),ms=c(e),M=o(e,"H2",{id:!0});var Bt=i(M);A=o(Bt,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var ka=i(A);Oe=o(ka,"SPAN",{class:!0}),i(Oe).forEach(s),ka.forEach(s),It=u(Bt,"Longhorn"),Bt.forEach(s),ks=c(e),ie=o(e,"P",{});var ba=i(ie);Tt=u(ba,"Microk8s comes with several options for storage. It’s not like I particularly dislike any of them, it’s just I really like longhorn. I always had a solid experience with the thing and it’s super simple to install."),ba.forEach(s),bs=c(e),re=o(e,"P",{});var va=i(re);xt=u(va,"First add the helm repo"),va.forEach(s),vs=c(e),G=o(e,"PRE",{class:!0});var Ya=i(G);Ya.forEach(s),ys=c(e),ue=o(e,"P",{});var ya=i(ue);St=u(ya,"Then run the following to install it"),ya.forEach(s),ws=c(e),U=o(e,"PRE",{class:!0});var $a=i(U);$a.forEach(s),Es=c(e),pe=o(e,"P",{});var wa=i(pe);Mt=u(wa,"Then watch the pods until you see them all spawn everything"),wa.forEach(s),_s=c(e),K=o(e,"PRE",{class:!0});var za=i(K);za.forEach(s),gs=c(e),ce=o(e,"P",{});var Ea=i(ce);At=u(Ea,"After that the only thing you’ll need is to add an ingress controller."),Ea.forEach(s),Ps=c(e),J=o(e,"PRE",{class:!0});var Xa=i(J);Xa.forEach(s),Is=c(e),O=o(e,"P",{});var Ms=i(O);Ot=u(Ms,"And that’s pretty much all to it. Just add the DNS names into your "),He=o(Ms,"CODE",{});var _a=i(He);Ht=u(_a,"/etc/hosts"),_a.forEach(s),Rt=u(Ms," and you should be good to go."),Ms.forEach(s),this.h()},h(){h(ke,"class","icon icon-link"),h(y,"aria-hidden","true"),h(y,"tabindex","-1"),h(y,"href","#initial-server-setup"),h(v,"id","initial-server-setup"),h(H,"class","language-sh"),h(R,"class","language-sh"),h(ye,"class","icon icon-link"),h(g,"aria-hidden","true"),h(g,"tabindex","-1"),h(g,"href","#kubes-install"),h(_,"id","kubes-install"),h(L,"class","language-sh"),h(N,"class","language-sh"),h(D,"class","language-sh"),h(Te,"class","icon icon-link"),h(I,"aria-hidden","true"),h(I,"tabindex","-1"),h(I,"href","#initial-tooling-setup"),h(P,"id","initial-tooling-setup"),h(C,"class","language-sh"),h(B,"class","language-sh"),h(Ae,"class","icon icon-link"),h(S,"aria-hidden","true"),h(S,"tabindex","-1"),h(S,"href","#kubes-dashboard"),h(x,"id","kubes-dashboard"),h(F,"class","language-sh"),h(j,"class","language-sh"),h(q,"class","language-sh"),h(Oe,"class","icon icon-link"),h(A,"aria-hidden","true"),h(A,"tabindex","-1"),h(A,"href","#longhorn"),h(M,"id","longhorn"),h(G,"class","language-sh"),h(U,"class","language-sh"),h(K,"class","language-sh"),h(J,"class","language-sh")},m(e,t){a(e,b,t),n(b,As),a(e,Re,t),a(e,V,t),n(V,Os),a(e,Le,t),a(e,W,t),n(W,Hs),a(e,Ne,t),a(e,v,t),n(v,y),n(y,ke),n(v,Rs),a(e,De,t),a(e,Y,t),n(Y,Ls),a(e,Ce,t),a(e,w,t),n(w,Ns),n(w,be),n(be,Ds),n(w,Cs),a(e,Be,t),a(e,$,t),n($,Bs),a(e,Fe,t),a(e,H,t),H.innerHTML=Pa,a(e,je,t),a(e,E,t),n(E,Fs),n(E,ve),n(ve,js),n(E,qs),a(e,qe,t),a(e,R,t),R.innerHTML=Ia,a(e,Ge,t),a(e,z,t),n(z,Gs),a(e,Ue,t),a(e,_,t),n(_,g),n(g,ye),n(_,Us),a(e,Ke,t),a(e,X,t),n(X,Ks),a(e,Je,t),a(e,L,t),L.innerHTML=Ta,a(e,Ve,t),a(e,Q,t),n(Q,Js),a(e,We,t),a(e,Z,t),n(Z,Vs),a(e,Ye,t),a(e,N,t),N.innerHTML=xa,a(e,$e,t),a(e,f,t),n(f,Ws),n(f,we),n(we,Ys),n(f,$s),n(f,Ee),n(Ee,zs),n(f,Xs),a(e,ze,t),a(e,ee,t),n(ee,Qs),a(e,Xe,t),a(e,D,t),D.innerHTML=Sa,a(e,Qe,t),a(e,d,t),n(d,Zs),n(d,_e),n(_e,et),n(d,st),n(d,ge),n(ge,tt),n(d,at),a(e,Ze,t),a(e,m,t),n(m,nt),n(m,Pe),n(Pe,lt),n(m,ot),n(m,Ie),n(Ie,it),n(m,rt),a(e,es,t),a(e,P,t),n(P,I),n(I,Te),n(P,ut),a(e,ss,t),a(e,se,t),n(se,pt),a(e,ts,t),a(e,C,t),C.innerHTML=Ma,a(e,as,t),a(e,te,t),n(te,ct),a(e,ns,t),a(e,B,t),B.innerHTML=Aa,a(e,ls,t),a(e,T,t),n(T,ht),n(T,xe),n(xe,ft),n(T,dt),a(e,os,t),a(e,k,t),n(k,mt),n(k,Se),n(Se,kt),n(k,bt),n(k,Me),n(Me,vt),n(k,yt),a(e,is,t),a(e,x,t),n(x,S),n(S,Ae),n(x,wt),a(e,rs,t),a(e,ae,t),n(ae,Et),a(e,us,t),a(e,F,t),F.innerHTML=Oa,a(e,ps,t),a(e,ne,t),n(ne,_t),a(e,cs,t),a(e,le,t),n(le,gt),a(e,hs,t),a(e,j,t),j.innerHTML=Ha,a(e,fs,t),a(e,oe,t),n(oe,Pt),a(e,ds,t),a(e,q,t),q.innerHTML=Ra,a(e,ms,t),a(e,M,t),n(M,A),n(A,Oe),n(M,It),a(e,ks,t),a(e,ie,t),n(ie,Tt),a(e,bs,t),a(e,re,t),n(re,xt),a(e,vs,t),a(e,G,t),G.innerHTML=La,a(e,ys,t),a(e,ue,t),n(ue,St),a(e,ws,t),a(e,U,t),U.innerHTML=Na,a(e,Es,t),a(e,pe,t),n(pe,Mt),a(e,_s,t),a(e,K,t),K.innerHTML=Da,a(e,gs,t),a(e,ce,t),n(ce,At),a(e,Ps,t),a(e,J,t),J.innerHTML=Ca,a(e,Is,t),a(e,O,t),n(O,Ot),n(O,He),n(He,Ht),n(O,Rt)},p:Ft,i:Ft,o:Ft,d(e){e&&s(b),e&&s(Re),e&&s(V),e&&s(Le),e&&s(W),e&&s(Ne),e&&s(v),e&&s(De),e&&s(Y),e&&s(Ce),e&&s(w),e&&s(Be),e&&s($),e&&s(Fe),e&&s(H),e&&s(je),e&&s(E),e&&s(qe),e&&s(R),e&&s(Ge),e&&s(z),e&&s(Ue),e&&s(_),e&&s(Ke),e&&s(X),e&&s(Je),e&&s(L),e&&s(Ve),e&&s(Q),e&&s(We),e&&s(Z),e&&s(Ye),e&&s(N),e&&s($e),e&&s(f),e&&s(ze),e&&s(ee),e&&s(Xe),e&&s(D),e&&s(Qe),e&&s(d),e&&s(Ze),e&&s(m),e&&s(es),e&&s(P),e&&s(ss),e&&s(se),e&&s(ts),e&&s(C),e&&s(as),e&&s(te),e&&s(ns),e&&s(B),e&&s(ls),e&&s(T),e&&s(os),e&&s(k),e&&s(is),e&&s(x),e&&s(rs),e&&s(ae),e&&s(us),e&&s(F),e&&s(ps),e&&s(ne),e&&s(cs),e&&s(le),e&&s(hs),e&&s(j),e&&s(fs),e&&s(oe),e&&s(ds),e&&s(q),e&&s(ms),e&&s(M),e&&s(ks),e&&s(ie),e&&s(bs),e&&s(re),e&&s(vs),e&&s(G),e&&s(ys),e&&s(ue),e&&s(ws),e&&s(U),e&&s(Es),e&&s(pe),e&&s(_s),e&&s(K),e&&s(gs),e&&s(ce),e&&s(Ps),e&&s(J),e&&s(Is),e&&s(O)}}}const an={slug:"czFmXY",date:"16 November 2024",title:"Setting up a microk8s cluster in a homelab",description:"A quick guide how to setup a working kubernetes cluster for a homelab using ubuntu server and microk8s",tags:["kubernetes","linux","homelab"]};class nn extends Qa{constructor(b){super(),Za(this,b,null,sn,en,{})}}export{nn as default,an as metadata};
